distinct() %>%
write_tsv("rename.list", col_names = F)
setwd("~/OneDrive - The University of Chicago/Genomics/NCBI Upload/20220706/NCBI report files")
library(tidyverse)
library(seqinr)
library(Biostrings)
rfs <- list.files(pattern = "Remaining")
fixfastas <- list()
rfs
fixfastas
rfs <- list.files(pattern = "^Contamination")
rfs
rfs <- list.files(pattern = "^Contamination|RemainingContamination")
rfs
fixfastas <- list()
for (fn in rfs){
fapre <- gsub("RemainingContamination\\_|\\.txt|Contamination\\_","",fn)
fixfastas[[fapre]] <- read_tsv(fn) %>% #view
mutate(file = fapre) %>%
filter(!is.na(BioSample), !grepl("^SUB",SUBID)) %>%
mutate(BioSample = gsub("[0-9]+,[0-9]+","",BioSample)) %>%
separate(BioSample, c("start", "end"), sep = "\\.\\.+", convert = T)
}
lengthCut = 500
pros <- bind_rows(fixfastas) %>%
dplyr::rename(length = BioProject) %>%
mutate(length = as.numeric(length),endlength = length - end,
exec = case_when(
start >  lengthCut & endlength > lengthCut ~ "Split",
start >  lengthCut ~ "Up",
endlength > lengthCut ~ "Down",
TRUE ~ "Delete"
)) %>%
group_split(file)
repairFasta <- function(fadf){
fafn <- unique(fadf$file)
foundfa <- list.files(path = "./repaired",pattern = fafn,
full.names = T)
if (is_empty(foundfa)){
foundfa <- list.files(path = "./fasta",pattern = fafn,
full.names = T)[1]
}
fa <- readDNAStringSet(foundfa)
orname <- sapply(str_split(names(fa)," "), function(x) x[1])
orname <- sapply(str_split(orname,"\\|"), function(x) x[length(x)])
names(fa) <- orname
for (i in 1:nrow(fadf)){
seqid = fadf$SUBID[i]
exec = fadf$exec[i]
if (exec == "Up"){
fa[[seqid]] <- fa[[seqid]][1:(fadf$start[i]-1)]
}
if ( exec == "Down"){
fa[[seqid]] <- fa[[seqid]][(fadf$end[i]+1):fadf$length[i]]
}
if ( exec == "Split"){
fa[[paste0(seqid,"_up")]] <- fa[[seqid]][1:(fadf$start[i]-1)]
fa[[paste0(seqid,"_down")]] <- fa[[seqid]][(fadf$end[i]+1):fadf$length[i]]
fa[[seqid]] <- NULL
}
if ( exec == "Delete"){
fa[[seqid]] <- NULL
}
}
writeXStringSet(fa, paste0("./repaired/",gsub("_",".",fafn),".fna"))
}
dir.create("repaired")
sapply(pros, repairFasta)
pros
repairFasta
pros
fafn <- unique(fadf$file)
pros[1]
pros[[1]]
fadf=pros[[1]]
fafn <- unique(fadf$file)
foundfa <- list.files(path = "./repaired",pattern = fafn,
full.names = T)
if (is_empty(foundfa)){
foundfa <- list.files(path = "./fasta",pattern = fafn,
full.names = T)[1]
}
fa <- readDNAStringSet(foundfa)
orname <- sapply(str_split(names(fa)," "), function(x) x[1])
fa
fa <- readDNAStringSet(foundfa)
foundfa
fafn
repairFasta <- function(fadf){
fafn <- unique(fadf$file)
foundfa <- list.files(path = "./repaired",pattern = fafn,
full.names = T)
if (is_empty(foundfa)){
foundfa <- list.files(path = "./fasta",pattern = fafn,
full.names = T)[1]
}
fa <- readDNAStringSet(foundfa)
orname <- sapply(str_split(names(fa)," "), function(x) x[1])
orname <- sapply(str_split(orname,"\\|"), function(x) x[length(x)])
names(fa) <- orname
for (i in 1:nrow(fadf)){
seqid = fadf$SUBID[i]
exec = fadf$exec[i]
if (exec == "Up"){
fa[[seqid]] <- fa[[seqid]][1:(fadf$start[i]-1)]
}
if ( exec == "Down"){
fa[[seqid]] <- fa[[seqid]][(fadf$end[i]+1):fadf$length[i]]
}
if ( exec == "Split"){
fa[[paste0(seqid,"_up")]] <- fa[[seqid]][1:(fadf$start[i]-1)]
fa[[paste0(seqid,"_down")]] <- fa[[seqid]][(fadf$end[i]+1):fadf$length[i]]
fa[[seqid]] <- NULL
}
if ( exec == "Delete"){
fa[[seqid]] <- NULL
}
}
writeXStringSet(fa, paste0("./repaired/",gsub("_",".",fafn),".fna"))
}
dir.create("repaired")
sapply(pros, repairFasta)
fafn <- unique(fadf$file)
foundfa <- list.files(path = "./repaired",pattern = fafn,
full.names = T)
foundfa
if (is_empty(foundfa)){
foundfa <- list.files(path = "./fasta",pattern = fafn,
full.names = T)[1]
}
foundfa
fafn
foundfa <- list.files(path = "./repaired",pattern = paste0("*", fafn ,"*"),
full.names = T)
if (is_empty(foundfa)){
foundfa <- list.files(path = "./fasta",pattern = paste0("*", fafn ,"*"),
full.names = T)[1]
}
foundfa
setwd("~/OneDrive - The University of Chicago/Genomics/NCBI Upload/20220706/")
library(tidyverse)
library(seqinr)
library(Biostrings)
rfs <- list.files(pattern = "^Contamination|RemainingContamination")
fixfastas <- list()
for (fn in rfs){
fapre <- gsub("RemainingContamination\\_|\\.txt|Contamination\\_","",fn)
fixfastas[[fapre]] <- read_tsv(fn) %>% #view
mutate(file = fapre) %>%
filter(!is.na(BioSample), !grepl("^SUB",SUBID)) %>%
mutate(BioSample = gsub("[0-9]+,[0-9]+","",BioSample)) %>%
separate(BioSample, c("start", "end"), sep = "\\.\\.+", convert = T)
}
lengthCut = 500
pros <- bind_rows(fixfastas) %>%
dplyr::rename(length = BioProject) %>%
mutate(length = as.numeric(length),endlength = length - end,
exec = case_when(
start >  lengthCut & endlength > lengthCut ~ "Split",
start >  lengthCut ~ "Up",
endlength > lengthCut ~ "Down",
TRUE ~ "Delete"
)) %>%
group_split(file)
fafn <- unique(fadf$file)
foundfa <- list.files(path = "./repaired",pattern = paste0("*", fafn ,"*"),
full.names = T)
if (is_empty(foundfa)){
foundfa <- list.files(path = "./fasta",pattern = paste0("*", fafn ,"*"),
full.names = T)[1]
}
foundfa
repairFasta <- function(fadf){
fafn <- unique(fadf$file)
foundfa <- list.files(path = "./repaired",pattern = paste0("*", fafn ,"*"),
full.names = T)
if (is_empty(foundfa)){
foundfa <- list.files(path = "./fasta",pattern = paste0("*", fafn ,"*"),
full.names = T)[1]
}
fa <- readDNAStringSet(foundfa)
orname <- sapply(str_split(names(fa)," "), function(x) x[1])
orname <- sapply(str_split(orname,"\\|"), function(x) x[length(x)])
names(fa) <- orname
for (i in 1:nrow(fadf)){
seqid = fadf$SUBID[i]
exec = fadf$exec[i]
if (exec == "Up"){
fa[[seqid]] <- fa[[seqid]][1:(fadf$start[i]-1)]
}
if ( exec == "Down"){
fa[[seqid]] <- fa[[seqid]][(fadf$end[i]+1):fadf$length[i]]
}
if ( exec == "Split"){
fa[[paste0(seqid,"_up")]] <- fa[[seqid]][1:(fadf$start[i]-1)]
fa[[paste0(seqid,"_down")]] <- fa[[seqid]][(fadf$end[i]+1):fadf$length[i]]
fa[[seqid]] <- NULL
}
if ( exec == "Delete"){
fa[[seqid]] <- NULL
}
}
writeXStringSet(fa, paste0("./repaired/",gsub("_",".",fafn),".fna"))
}
dir.create("repaired")
sapply(pros, repairFasta)
fadf
setwd("~/OneDrive - The University of Chicago/Genomics/NCBI Upload/20220706/")
# fix large genome
library(tidyverse)
library(data.table)
library(Biostrings)
library(purrr)
con <- dbConnect(dbDriver("PostgreSQL"),
#host="localhost",
host="128.135.41.32",
dbname="dfi_commensal_library",
user="dfi_admin",password="dfiadmin2022")
library(RPostgreSQL)
con <- dbConnect(dbDriver("PostgreSQL"),
#host="localhost",
host="128.135.41.32",
dbname="dfi_commensal_library",
user="dfi_admin",password="dfiadmin2022")
taxmap <- tbl(con, "ncbi_blast_taxdump") %>%
collect()
# Get list of all files with genome size issue
rfs <- list.files(pattern = "GenomeSize_")
df_meta <- data.frame(matrix(ncol=5, nrow=0))
colnames(df_meta) <- c("seq_id","submitted_genome_size", "genome_size_min", "genome_size_max", "issue")
kraken2cmd <- list()
splist <- list()
not_found <- c()
for (r in rfs){
seq <- gsub("GenomeSize\\_|\\_prokkaContigs.txt","",r)
seq <- gsub("_", ".", seq)
# Parse NCBI correction summary
splist[[seq]] <- read_tsv(r, skip = 8, col_names = c("sub","bioj","samid","correctSpecies")) %>%
dplyr::slice(1) %>%
mutate(seq_id = seq)
submitted_genome_size <- read_tsv(r, skip = 8, col_names = c("sub","bioj","samid","correctSpecies")) %>%
dplyr::slice(24)
submitted_genome_size <- readr::parse_number(submitted_genome_size[[1]])
temp <- read_tsv(r, skip = 8, col_names = c("sub","bioj","samid","correctSpecies")) %>%
dplyr::slice(25)
genome_size_min <- gsub(".*\\[(.+)\\-.*", "\\1", temp[1])
genome_size_max <- gsub(".*\\-(.+)\\].*", "\\1", temp[1])
issue = case_when(
submitted_genome_size<genome_size_max & submitted_genome_size>genome_size_min ~ "No issues",
submitted_genome_size<genome_size_min ~ "Genome size too small",
submitted_genome_size>genome_size_max ~ "Genome size too big",
TRUE ~ "Unknown")
df_meta[nrow(df_meta) + 1, ] <- c(seq, submitted_genome_size, genome_size_min, genome_size_max, issue)
# Kraken2 data ===============================
kraken2cmd[[seq]] <- tbl(con, "kraken2_contigs") %>%
filter(seq_id == seq) %>%
collect() %>%
mutate(tax_id = as.numeric(gsub("taxid ","",str_extract(taxon, "taxid [0-9]+")))) %>%
dplyr::select(filename, tax_id, contig, length, seq_id) %>%
left_join(taxmap, by="tax_id")
}
View(df_meta)
dbDisconnect(con)
ktax <- dplyr::bind_rows(kraken2cmd)
kraken_fa <- ktax %>%
left_join(bind_rows(splist), by="seq_id") %>%
mutate(correctGenus = gsub(" .+","", correctSpecies)) %>%
filter(genus == correctGenus | species == correctSpecies)
corrected_genome_size <- ktax %>%
left_join(bind_rows(splist), by="seq_id") %>%
mutate(correctGenus = gsub(" .+","", correctSpecies)) %>%
filter(genus == correctGenus | species == correctSpecies) %>%
dplyr::count(seq_id, wt = length, name="corrected_genome_size")
df_meta_2 <- df_meta %>%
left_join(corrected_genome_size, by="seq_id") %>%
dplyr::rename(kraken_corrected_genome_size=corrected_genome_size) %>%
mutate(kraken_corrected_genome_size = as.numeric(kraken_corrected_genome_size),
genome_size_max = as.numeric(genome_size_max),
genome_size_min = as.numeric(genome_size_min)) %>%
mutate(kraken_filtering_result = case_when(
kraken_corrected_genome_size<genome_size_max & kraken_corrected_genome_size>genome_size_min ~ "Corrected",
kraken_corrected_genome_size<genome_size_min ~ "Genome size too small",
kraken_corrected_genome_size>genome_size_max ~ "Genome size too big",
is.na(kraken_corrected_genome_size) ~ "No matches in kraken",
TRUE ~ "Unknown")) %>%
mutate(final_corrected_size = NA,
final_corrected_result = NA)
View(df_meta_2)
seqs1 <- df_meta_2 %>% filter(kraken_filtering_result=="Corrected") %>%  pull(seq_id)
subsetfa1 <- kraken_fa %>%
filter(seq_id %in% seqs1)
seqs2 <- df_meta_2 %>% filter(kraken_filtering_result=="Genome size too big") %>%  pull(seq_id)
temp <- list()
for(seq in seqs2)
{
# get contigs with cum size < max size
temp[[seq]] <- kraken_fa %>%
filter(seq_id == seq) %>%
arrange(desc(length)) %>%
mutate(cum = cumsum(length)) %>%
filter(cum < as.numeric(df_meta[df_meta$seq_id==seq,]$genome_size_max))
df_meta_2[df_meta_2$seq_id==seq,]$final_corrected_result = "Corrected"
df_meta_2[df_meta_2$seq_id==seq,]$final_corrected_size = as.numeric(tail(temp[[seq]],1)$cum)
}
subsetfa2 <- list()
subsetfa2 <- dplyr::bind_rows(temp)
seqs3 <- df_meta_2 %>% filter(kraken_filtering_result=="No matches in kraken") %>%  pull(seq_id)
seqs4 <- df_meta_2 %>% filter(kraken_filtering_result=="Genome size too small") %>%  pull(seq_id)
temp <- list()
for(seq in c(seqs3,seqs4))
{
spkp <- ktax %>%
filter(seq_id == seq) %>%
dplyr::count(seq_id, kingdom, phylum, class, order, family, genus, species,
wt = length, name = "total", sort = T)
spfa <- ktax %>%
right_join(spkp)
temp[[seq]] <- spfa %>%
arrange(desc(length)) %>%
mutate(cum = cumsum(length)) %>%
filter(cum < as.numeric(df_meta[df_meta$seq_id==seq,]$genome_size_max))
df_meta_2[df_meta_2$seq_id==seq,]$final_corrected_result = "Corrected"
df_meta_2[df_meta_2$seq_id==seq,]$final_corrected_size = as.numeric(tail(temp[[seq]],1)$cum)
}
subsetfa3 <- list()
subsetfa3 <- dplyr::bind_rows(temp)
suballfa <- bind_rows(subsetfa1, subsetfa2, subsetfa3)
sublist <- base::split(suballfa, suballfa$seq_id, drop = T) # split into df for each seq_id
for (f in 1:length(sublist)){
r = unique(sublist[[f]]$seq_id)
# first look into repaired folder
foundfa <- list.files(path = "./repaired",pattern = paste0(r,"_"),
full.names = T)
# 2nd go to fasta folder from NCBI
if ( purrr::is_empty(foundfa) ){
foundfa <- list.files(path = "./fasta",pattern = paste0(r,"_"),
full.names = T)
}
if ( is_empty(foundfa) ){
r <- gsub("_",".", r)
foundfa <- Sys.glob(paste0("/Volumes/dfi-cores/Genomes/*contig*/",r,"*"))
}
fa <- readDNAStringSet(foundfa)
orname <- sapply(str_split(names(fa)," "), function(x) x[1]) # get headers
names(fa) <- orname
subset <- sublist[[f]]$contig[sublist[[f]]$contig %in% names(fa)]
print(paste0(seq, "CONTIGS NOT FOUND IN FASTA: \n"))
print(sublist[[f]]$contig[!(sublist[[f]]$contig %in% names(fa))])
fa <- fa[subset]
r <- gsub("_",".", r)
writeXStringSet(fa, paste0("./repaired/",r,".prokkaContigs.fna"))
}
seq
suballfa
sublist
r = unique(sublist[[f]]$seq_id)
r
# first look into repaired folder
foundfa <- list.files(path = "./repaired",pattern = paste0(r,"_"),
full.names = T)
foundfa
# 2nd go to fasta folder from NCBI
if ( purrr::is_empty(foundfa) ){
foundfa <- list.files(path = "./fasta",pattern = paste0(r,"_"),
full.names = T)
}
foundfa
if ( is_empty(foundfa) ){
r <- gsub("_",".", r)
foundfa <- Sys.glob(paste0("/Volumes/dfi-cores/Genomes/*contig*/",r,"*"))
}
fa <- readDNAStringSet(foundfa)
orname <- sapply(str_split(names(fa)," "), function(x) x[1]) # get headers
names(fa) <- orname
subset <- sublist[[f]]$contig[sublist[[f]]$contig %in% names(fa)]
subset
setwd("~/GitHub/DFI_Metabolomics_postgres_upload/test_files/")
biobank_metab_labels=readRDS("biobank_metab_labels.rds")
evnin_metab_labels=readRDS("evnin_metab_labels.rds")
View(biobank_metab_labels)
biobank_labels <- tbl(con, "biobank_labels") %>% collect()
biobank_metab <- tbl(con, "biobank_metab") %>% collect()
library(RPostgreSQL)
library(tidyverse)
library(shiny)
library(shinyalert)
library(shinyjs)
library(shinythemes)
library(tidyr)
library(stringr)
library(dplyr)
library(DT)
library(stringr)
library(ggplot2)
con <- dbConnect(dbDriver("PostgreSQL"),
host="128.135.41.32",
dbname="dfi_commensal_library",
user="dfi_admin",password="dfiadmin2022")
biobank_labels <- tbl(con, "biobank_labels") %>% collect()
biobank_metab <- tbl(con, "biobank_metab") %>% collect()
View(biobank_labels)
View(biobank_metab)
runApp('~/GitHub/DFI_Metabolomics_postgres_upload/main.R')
runApp('~/GitHub/DFI_Metabolomics_postgres_upload/main.R')
View(biobank_metab)
View(biobank_labels)
View(biobank_metab_labels)
View(evnin_metab_labels)
# Connect to postgres table
con <- dbConnect(dbDriver("PostgreSQL"),
host="128.135.41.32",
dbname="dfi_commensal_library",
user="dfi_admin",password="dfiadmin2022")
evnin_metabolomics <- tbl(con, "evnin_metabolomics") %>% collect()
View(evnin_metabolomics)
unique(evnin_metabolomics$trial) %>% view
evnin_metabolomics %>% filter(type == "quant") %>% group_by(compound) %>% distrinct(compound)
evnin_metabolomics %>% filter(type == "quant") %>% group_by(compound) %>% distinct(compound)
evnin_metabolomics_new <- evnin_metabolomics %>%
mutate(panel=case_when(
grepl("Bile", filename, ignore.case = T) ~ "Bile acids",
grepl("PFBBr|SCFA", filename, ignore.case = T) ~ "SCFA",
grepl("Tryptophan|Indole", filename, ignore.case = T) ~ "Tryptophan",
grepl("TMS", filename, ignore.case = T) ~ "TMS-MOX",
TRUE ~ "Unknown"))
unique(evnin_metabolomics_new$panel)
dbWriteTable(con, "evnin_metabolomics", evnin_metabolomics_new, row.names=F, append=F, overwrite=T)
evnin_metabolomics <- tbl(con, "evnin_metabolomics") %>% collect()
View(evnin_metabolomics)
evnin_metabolomics_new <- evnin_metabolomics_new %>%
relocate(panel, .after = metab_well)
View(evnin_metabolomics_new)
dbWriteTable(con, "evnin_metabolomics", evnin_metabolomics_new, row.names=F, append=F, overwrite=T)
evnin_metabolomics <- tbl(con, "evnin_metabolomics") %>% collect()
View(evnin_metabolomics)
evnin_metabolomics <- tbl(con, "evnin_metabolomics") %>% collect()
evnin_metabolomics_new <- evnin_metabolomics %>%
mutate(compound = tolower(compound),
compound = gsub(" ", "-", compound),
compound = gsub("-acid", " acid", compound))
unique(evnin_metabolomics_new$compound) %>% view
evnin_metabolomics_new %>% select(compound, panel) %>%
distinct() %>% view
evnin_metabolomics_new %>% dplyr::select(compound, panel) %>%
distinct() %>% view
evnin_metabolomics_new %>% dplyr::select(compound, panel, type) %>%
distinct() %>% view
sampleid="EW041122_plate1_A1"
sub("_[^_]+$", "", sampleid)
gsub("^.*\\_", "", sampleid)
runApp('~/GitHub/DFI_Metabolomics_postgres_upload/main.R')
getwd()
runApp('~/GitHub/DFI_Metabolomics_postgres_upload/main.R')
runApp('~/GitHub/DFI_Metabolomics_postgres_upload/main.R')
runApp('~/GitHub/DFI_Metabolomics_postgres_upload/main.R')
runApp('~/GitHub/DFI_Metabolomics_postgres_upload/main.R')
runApp('~/GitHub/DFI_Metabolomics_postgres_upload/main.R')
runApp('main.R')
runApp('~/GitHub/DFI_Metabolomics_postgres_upload/main.R')
runApp('~/GitHub/DFI_Metabolomics_postgres_upload/main.R')
runApp('~/GitHub/DFI_Metabolomics_postgres_upload/main.R')
runApp('~/GitHub/DFI_Metabolomics_postgres_upload/main.R')
View(evnin_metabolomics_new)
View(evnin_metabolomics)
View(evnin_metabolomics_new)
dbWriteTable(con, "evnin_metabolomics", df_upload, row.names=F, append=F, overwrite=T)
dbWriteTable(con, "evnin_metabolomics", evnin_metabolomics_new, row.names=F, append=F, overwrite=T)
runApp('~/GitHub/DFI_Metabolomics_postgres_upload/main.R')
file$datapath="removed_qcs_normalized_results_20220420_PFBBr_EVIT1302_1303_20220425.csv"
file="removed_qcs_normalized_results_20220420_PFBBr_EVIT1302_1303_20220425.csv"
df_data = read.csv(file, check.names = F) %>%
mutate(trial = sub("_[^_]+$", "", sampleid), .after=sampleid)
View(df_data)
df_data = read.csv(file, check.names = F) %>%
mutate(trial = sub("_[^_]+$", "", sampleid), .after=sampleid) %>%
mutate(metab_well = gsub("^.*\\_", "", sampleid), .after=trial)
View(df_data)
runApp('~/GitHub/DFI_Metabolomics_postgres_upload/main.R')
runApp('~/GitHub/DFI_Metabolomics_postgres_upload/main.R')
runApp('~/GitHub/DFI_Metabolomics_postgres_upload/main.R')
runApp('~/GitHub/DFI_Metabolomics_postgres_upload/main.R')
evnin_metabolomics <- tbl(con, "evnin_metabolomics") %>% collect()
runApp('~/GitHub/DFI_Metabolomics_postgres_upload/main.R')
runApp('~/GitHub/DFI_Metabolomics_postgres_upload/main.R')
runApp('~/GitHub/DFI_Metabolomics_postgres_upload/main.R')
library(RPostgreSQL)
library(tidyverse)
library(shiny)
library(shinyalert)
library(shinyjs)
library(shinythemes)
library(tidyr)
library(stringr)
library(dplyr)
library(DT)
library(stringr)
library(ggplot2)
# Connect to postgres table
con <- dbConnect(dbDriver("PostgreSQL"),
host="128.135.41.32",
dbname="dfi_commensal_library",
user="dfi_admin",password="dfiadmin2022")
# Connect to postgres table
con <- dbConnect(RPostgres::dbDriver("PostgreSQL"),
host="128.135.41.32",
dbname="dfi_commensal_library",
user="dfi_admin",password="dfiadmin2022")
# Connect to postgres table
con <- dbConnect(RPostgreSQL::dbDriver("PostgreSQL"),
host="128.135.41.32",
dbname="dfi_commensal_library",
user="dfi_admin",password="dfiadmin2022")
